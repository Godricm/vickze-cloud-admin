#spring:
#  cloud:
#    gateway:
#      globalcors:
#        corsConfigurations:
#          '[/**]':
#            allowCredentials: true
#            allowedOrigins:
#              - "*"
#            allowedMethods:
#              - OPTION
#              - GET
#              - POST
#              - PUT
#              - DELETE
#      discovery:
#        locator:
#          enabled: true
#      routes:
#        - id: vickze-auth
#          uri: lb://vickze-auth
#          order: 0
#          predicates:
#            - Path=/api/auth/**
#          filters:
#            #- AddRequestHeader=X-Forwarded-Prefix, /api/generator  #swagger XForwardPrefixPathAdjuster.java
#            - AddResponseHeader=Access-Control-Allow-Origin, *
#            - AddResponseHeader=X-Response-Foo, Bar
#            - StripPrefix=2
#            - name: RequestRateLimiter
#              args:
#                key-resolver: '#{@ipAddressKeyResolver}'
#                redis-rate-limiter.replenishRate: 5 #每秒执行多少请求，而不需要删除任何请求。这是令牌桶被填充的速率。
#                redis-rate-limiter.burstCapacity: 3 #每秒钟最大请求数
#        - id: vickze-generator
#          uri: lb://vickze-generator
#          order: 0
#          predicates:
#            - Path=/api/generator/**
#          filters:
#            #- AddRequestHeader=X-Forwarded-Prefix, /api/generator  #swagger XForwardPrefixPathAdjuster.java
#            - AddResponseHeader=Access-Control-Allow-Origin, *
#            - AddResponseHeader=X-Response-Foo, Bar
#            - StripPrefix=2
#            - name: RequestRateLimiter
#              args:
#                key-resolver: '#{@ipAddressKeyResolver}'
#                redis-rate-limiter.replenishRate: 5 #每秒执行多少请求，而不需要删除任何请求。这是令牌桶被填充的速率。
#                redis-rate-limiter.burstCapacity: 3 #每秒钟最大请求数
#        - id: vickze-sso
#          uri: lb://vickze-sso
#          order: 0
#          predicates:
#            - Path=/api/sso/**
#          filters:
#            #- AddRequestHeader=X-Forwarded-Prefix, /api/generator  #swagger XForwardPrefixPathAdjuster.java
#            - AddResponseHeader=Access-Control-Allow-Origin, *
#            - AddResponseHeader=X-Response-Foo, Bar
#            - StripPrefix=2
#            - name: RequestRateLimiter
#              args:
#                key-resolver: '#{@ipAddressKeyResolver}'
#                redis-rate-limiter.replenishRate: 5 #每秒执行多少请求，而不需要删除任何请求。这是令牌桶被填充的速率。
#                redis-rate-limiter.burstCapacity: 3 #每秒钟最大请求数
#
#  redis:
#    host: ${REDIS_HOST:localhost}
#    port: ${REDIS_PORT:6379}
#    database: ${REDIS_DB:0}
#
##eureka:
##    instance:
##        prefer-ip-address: true
##    client:
##        serviceUrl:
##            defaultZone: http://${EUREKA_HOST:localhost}:${EUREKA_PORT:8761}/eureka/
#
#
#logging:
#  level:
#    io.vickze: DEBUG
#    com.alibaba.nacos.client.naming: ERROR
#
## 配置swagger
#swagger:
#  enabled: true
#
#management:
#  endpoints:
#    web:
#      exposure:
#        include: '*'
#  endpoint:
#    health:
#      show-details: ALWAYS
#
#
#feign:
#  hystrix:
#    enabled: true
#  httpclient:
#    enabled: false
#  okhttp:
#    enabled: true #使用okhttp，默认时 FeignExceptionErrorDecoder response body为null，原因是feign.Client类 connection.getErrorStream() 为null
#    read-timeout: 10000 #okhttp client超时时间配置 翻看源码发现，实际调用read-timeout、connect-timeout、followRedirects会被ribbon的覆盖 相关类LoadBalancerFeignClient
#
#
##负载均衡
#ribbon:
#  OkToRetryOnAllOperations: false #对所有操作请求都进行重试,默认false
#  ReadTimeout: 5000   #负载均衡超时时间，默认值5000
#  ConnectTimeout: 3000 #ribbon请求连接的超时时间，默认值2000
#  MaxAutoRetries: 0     #对当前实例的重试次数，默认0
#  MaxAutoRetriesNextServer: 1 #对切换实例的重试次数，默认1
#
##熔断
#hystrix:
#  command:
#    default:  #default全局有效，service id指定应用有效
#      execution:
#        timeout:
#          #如果enabled设置为false，则请求超时交给ribbon控制,为true,则超时作为熔断根据
#          #尝试了下发现需要配置ribbon超时时间才会生效
#          enabled: false
#        isolation:
#          thread:
#            timeoutInMilliseconds: 1000 #断路器超时时间，默认1000ms
#
#access:
#  forbidden-interfaces:
#    - method: POST
#      uri: /api/auth/checkPermission
#    - method: GET
#      uri: /api/auth/token/validate
