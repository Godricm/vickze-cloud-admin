-- 创建数据库
CREATE DATABASE IF NOT EXISTS `vickze_generator` DEFAULT CHARACTER SET utf8mb4;

USE vickze_generator;

-- 配置
CREATE TABLE IF NOT EXISTS `config` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL COMMENT '名称',
  `content` text NOT NULL COMMENT '内容',
  `type` int(2) NOT NULL COMMENT '类型 0-properties 1-yaml',
  `version` int DEFAULT 1 COMMENT '版本号',
  `deleted` int(1) DEFAULT 0 COMMENT '删除标志',
  `create_time` datetime COMMENT '创建时间',
  `update_time` datetime COMMENT '最后修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='配置';

-- 模版
CREATE TABLE IF NOT EXISTS `template` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL COMMENT '名称',
  `file_name` varchar(64) NOT NULL COMMENT '文件名称',
  `content` text NOT NULL COMMENT '内容',
  `type` int(2) NOT NULL COMMENT '类型 0-Velocity 1-Freemarker',
  `version` int DEFAULT 1 COMMENT '版本号',
  `deleted` int(1) DEFAULT 0 COMMENT '删除标志',
  `create_time` datetime COMMENT '创建时间',
  `update_time` datetime COMMENT '最后修改时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='模版';

INSERT INTO `config`(`name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('vick.zeng-jpa配置', '#代码生成器，配置信息\n\n#包名\nrepositoryPackage=io.vickze.repository\nmapperPackage=io.vickze.mapper\nservicePackage=io.vickze.service\nserviceImplPackage=io.vickze.service.impl\ncontrollerPackage=io.vickze.controller\ndomainPackage=io.vickze.domain\nenumsPackage=io.vickze.enums\nvalidationPackage=io.vickze.validation\n\n#作者\nauthor=vick.zeng\n#Email\nemail=zyk@yk95.top\n#表前缀(类名不会包含表前缀)\ntablePrefix=t_\n\n#类型转换，配置信息\ntinyint=Integer\nsmallint=Integer\nmediumint=Integer\nint=Integer\ninteger=Integer\nbigint=Long\nfloat=Float\ndouble=Double\ndecimal=BigDecimal\n\nchar=String\nvarchar=String\ntinytext=String\ntext=String\nmediumtext=String\nlongtext=String\n\ndate=LocalDate\ndatetime=LocalDateTime\ntimestamp=LocalDateTime\n\ndaoType=jpa\nvalidationInDO=true\nlombok=true', 0, 44, 0, now(), now());
INSERT INTO `config`(`name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('vick.zeng-mybatisPlus配置', '#代码生成器，配置信息\n\n#包名\nrepositoryPackage=io.vickze.repository\nmapperPackage=io.vickze.auth.mapper\nservicePackage=io.vickze.auth.service\nserviceImplPackage=io.vickze.auth.service.impl\ncontrollerPackage=io.vickze.auth.controller\ndomainPackage=io.vickze.auth.domain\nenumsPackage=io.vickze.auth.enums\nvalidationPackage=io.vickze.common.validation\ncommonDomainPackage=io.vickze.common.domain\ncommonEnumsPackage=io.vickze.common.enums\n\n#作者\nauthor=vick.zeng\n#Email\nemail=zyk@yk95.top\n#表前缀(类名不会包含表前缀)\ntablePrefix=t_\n\n#类型转换，配置信息\ntinyint=Integer\nsmallint=Integer\nmediumint=Integer\nint=Integer\ninteger=Integer\nbigint=Long\nfloat=Float\ndouble=Double\ndecimal=BigDecimal\n\nchar=String\nvarchar=String\ntinytext=String\ntext=String\nmediumtext=String\nlongtext=String\n\ndate=LocalDate\ndatetime=LocalDateTime\ntimestamp=LocalDateTime\n\ndaoType=mybatisPlus\nvalidationInDO=true\nlombok=true\n\nsystemPrefix=auth\nsystemApiPrefix=/server/api/auth', 0, 8, 0, now(), now());

INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('ant-design-pro-router', '${classNameLowerCamel}_router.js', '      {\n        path: \'/${classNameLowerCamel}\',\n        icon: \'\',\n        name: \'${classNameLowerCamel}\',\n        authority: [\'${systemPrefix}:${classNameLowerCamel}:view\'],\n        routes: [\n          {\n            path: \'/${classNameLowerCamel}/${classNameLowerCamel}-list\',\n            name: \'${classNameLowerCamel}List\',\n            component: \'./${classNameUpperCamel}/${classNameUpperCamel}List\',\n            authority: [\'${systemPrefix}:${classNameLowerCamel}:view\'],\n          },\n          {\n            path: \'/${classNameLowerCamel}/${classNameLowerCamel}-form\',\n            name: \'${classNameLowerCamel}Form\',\n            component: \'./${classNameUpperCamel}/${classNameUpperCamel}Form\',\n            authority: [\'${systemPrefix}:${classNameLowerCamel}:add\'],\n            hideInMenu: true,\n          },\n          {\n            path: \'/${classNameLowerCamel}/${classNameLowerCamel}-form/:id\',\n            name: \'${classNameLowerCamel}Form\',\n            component: \'./${classNameUpperCamel}/${classNameUpperCamel}Form\',\n            authority: [\'${systemPrefix}:${classNameLowerCamel}:edit\'],\n            hideInMenu: true,\n          },\n          {\n            path: \'/${classNameLowerCamel}/${classNameLowerCamel}-form/:duplicate/:id\',\n            name: \'${classNameLowerCamel}Form\',\n            component: \'./${classNameUpperCamel}/${classNameUpperCamel}Form\',\n            authority: [\'${systemPrefix}:${classNameLowerCamel}:duplicate\'],\n            hideInMenu: true,\n          },          \n          {\n            path: \'/${classNameLowerCamel}/${classNameLowerCamel}-profile/:id\',\n            name: \'${classNameLowerCamel}Profile\',\n            component: \'./${classNameUpperCamel}/${classNameUpperCamel}Profile\',\n            authority: [\'${systemPrefix}:${classNameLowerCamel}:profile\'],\n            hideInMenu: true,\n          },\n        ]\n      },', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('ant-design-pro-locale-menu-zh-CN', '${classNameLowerCamel}_menu_zh-CN.js', '    \'menu.${classNameLowerCamel}\': \'${tableComment}\',\n    \'menu.${classNameLowerCamel}.${classNameLowerCamel}List\': \'${tableComment}列表\',\n    \'menu.${classNameLowerCamel}.${classNameLowerCamel}Form\': \'${tableComment}表单\',\n    \'menu.${classNameLowerCamel}.${classNameLowerCamel}Profile\': \'${tableComment}详情\',\n\n', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('ant-design-pro-locale-zh-CN', '${classNameLowerCamel}_zh-CN.js', 'export default {\n#foreach ($column in $columns)\n#if(!(${column.attrNameLowerCamel.equals(\"id\")} || ${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}\n || ${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")}))\n    \'app.${classNameLowerCamel}.${column.attrNameLowerCamel}\': \'${column.comment}\',\n    \'app.${classNameLowerCamel}.${column.attrNameLowerCamel}.placeholder\': \'请输入${column.comment}\',\n    \'validation.${classNameLowerCamel}.${column.attrNameLowerCamel}\': \'请输入${column.comment}\',\n#end\n#end\n    \'app.${classNameLowerCamel}.add.title\': \'新增${tableComment}\',\n    \'app.${classNameLowerCamel}.edit.title\': \'修改${tableComment}\',\n    \'app.${classNameLowerCamel}.info.title\': \'${tableComment}\',\n};\n', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('ant-design-pro-model', '${classNameLowerCamel}.js', 'import { query${classNameUpperCamel}, get${classNameUpperCamel}, add${classNameUpperCamel}, update${classNameUpperCamel}, delete${classNameUpperCamel} } from \'@/services/api\';\nimport { formatMessage, FormattedMessage } from \'umi/locale\';\n\nexport default {\n  namespace: \'${classNameLowerCamel}\',\n\n  state: {\n    queryParams: {}, //除pagination外其他查询信息\n    list: [],\n    pagination: {\n      current: 1,\n      pageSize: 10,\n      total: 0,\n      showTotal: total => formatMessage({ id: \'table.total\' }, { total: total }),\n      pageSizeOptions: [\'10\', \'20\', \'30\'],\n      showSizeChanger: true,\n      showQuickJumper: true,\n    },\n  },\n\n  effects: {\n    *fetch({ payload }, { call, put }) {\n      const { offset, limit } = payload;\n      const result = yield call(query${classNameUpperCamel}, payload);\n      const list = result.data;\n      const total = Number.parseInt(result.response.headers.get(\'X-Total-Count\'));\n      const totalPage = total === 0 ? 1 : Math.ceil(total / limit);\n      const currentPage = (offset / limit) + 1;\n      \n      //list为空total大于0 跳到最后一页\n      if (list.length === 0 && total > 0) {\n        yield put({\n          type: \'fetch\',\n          payload: {\n            ...payload,\n            offset: (totalPage - 1) * limit,\n            limit: limit,\n          }\n        })\n      } else {\n        yield put({\n          type: \'queryList\',\n          payload: {\n            currentPage: currentPage,\n            pageSize: limit,\n            total: total,\n            list: list,\n          }\n        });\n      }\n    },\n    *appendFetch({ payload }, { call, put }) {\n      const { offset, limit } = payload;\n      const result = yield call(query${classNameUpperCamel}, payload);\n      const list = result.data;\n      const total = Number.parseInt(result.response.headers.get(\'X-Total-Count\'));\n      const currentPage = (offset / limit) + 1;\n      yield put({\n        type: \'appendList\',\n        payload: {\n          currentPage: currentPage,\n          pageSize: limit,\n          total: total,\n          list: list,\n        }\n      });\n    },\n    *fetchById({ payload, callback }, { call, put }) {\n      const response = yield call(get${classNameUpperCamel}, payload);\n      if (response) {\n        callback(response);\n      }\n    },\n    *deleteByIds({ payload, callback }, { call, put }) {\n      const response = yield call(delete${classNameUpperCamel}, payload);\n      if (response) {\n        callback(response);\n      }\n    },\n    *submitForm({ payload, callback }, { call, put }) {\n      const response = !payload.id ? yield call(add${classNameUpperCamel}, payload) : yield call(update${classNameUpperCamel}, payload);\n      if (response) {\n        callback(response);\n      }\n    }\n  },\n\n  reducers: {\n    queryList(state, action) {\n      return {\n        ...state,\n        list: action.payload.list,\n        pagination: {\n          ...state.pagination,\n          total: action.payload.total,\n          current: action.payload.currentPage,\n          pageSize: action.payload.pageSize,\n        },\n      };\n    },\n    appendList(state, action) {\n      return {\n        ...state,\n        list: state.list.concat(action.payload.list),\n        pagination: {\n          ...state.pagination,\n          total: action.payload.total,\n          current: action.payload.currentPage,\n          pageSize: action.payload.pageSize,\n        },\n      };\n    },\n    saveQueryParams(state, action) {\n      return {\n        ...state,\n        queryParams: action.payload,\n      }\n    },\n  },\n};', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('ant-design-pro-page-List', '${classNameUpperCamel}List.js', 'import React, { PureComponent } from \'react\';\nimport { connect } from \'dva\';\nimport moment from \'moment\';\nimport router from \'umi/router\';\nimport { formatMessage, FormattedMessage } from \'umi/locale\';\nimport {\n  Row,\n  Col,\n  Table,\n  Card,\n  Form,\n  Input,\n  Select,\n  Icon,\n  Button,\n  Dropdown,\n  Menu,\n  InputNumber,\n  DatePicker,\n  Modal,\n  message,\n  Badge,\n  Divider,\n  Steps,\n  Radio,\n} from \'antd\';\nimport PageHeaderWrapper from \'@/components/PageHeaderWrapper\';\nimport Authorized from \'@/utils/Authorized\';\nimport { getOrder, getFilterByMap } from \'@/utils/utils\';\nimport styles from \'@/pages/TableList.less\';\n\nconst FormItem = Form.Item;\n\n\n/* eslint react/no-multi-comp:0 */\n@connect(({ ${classNameLowerCamel}, loading }) => ({\n  ${classNameLowerCamel},\n  loading: loading.effects[\'${classNameLowerCamel}/fetch\'],\n}))\n@Form.create()\nclass ${classNameUpperCamel}List extends PureComponent {\n  state = {\n    selectedRowKeys: [],\n  };\n\n  componentDidMount() {\n    const {\n      ${classNameLowerCamel}: { list, pagination, queryParams },\n    } = this.props;\n\n    this.queryList(pagination, queryParams);\n  }\n\n  queryList = (pagination, queryParams) => {\n    let sorter;\n    if (queryParams.sorter) {\n      sorter = {\n        field: queryParams.sorter.field,\n        order: getOrder(queryParams.sorter.order),\n      }\n    }\n\n    const { dispatch } = this.props;\n\n    dispatch({\n      type: \'${classNameLowerCamel}/fetch\',\n      payload: {\n        ...queryParams.fieldsValue,\n        ...queryParams.filters,\n        ...sorter,\n        offset: (pagination.current - 1) * pagination.pageSize,\n        limit: pagination.pageSize,\n      },\n    });\n  }\n\n  saveQueryParams = (queryParams) => {\n    const { dispatch } = this.props;\n    dispatch({\n      type: \'${classNameLowerCamel}/saveQueryParams\',\n      payload: queryParams,\n    });\n  }\n\n\n  addOrEdit = id => {\n    if (id) {\n      router.push(`/${classNameLowerCamel}/${classNameLowerCamel}-form/${id}`);\n    } else {\n      router.push(`/${classNameLowerCamel}/${classNameLowerCamel}-form`);\n    }\n  }\n\n  duplicate = id => {\n    router.push(`/${classNameLowerCamel}/${classNameLowerCamel}-form/duplicate/${id}`);\n  }\n\n  profile = id => {\n    router.push(`/${classNameLowerCamel}/${classNameLowerCamel}-profile/${id}`);\n  }\n\n  delete = (id) => {\n    const ids = [];\n    ids.push(id);\n    this.deleteBatch(ids);\n  }\n\n\n  deleteBatch = (ids) => {\n    Modal.confirm({\n      title: formatMessage({ id: \'modal.delete\' }),\n      content: formatMessage({ id: \'modal.deleteConfirm\' }),\n      okText: formatMessage({ id: \'modal.confirm\' }),\n      cancelText: formatMessage({ id: \'modal.cancel\' }),\n      onOk: () => {\n        const { dispatch } = this.props;\n        dispatch({\n          type: \'${classNameLowerCamel}/deleteByIds\',\n          payload: ids,\n          callback: (response) => {\n            this.setState({\n              selectedRowKeys: [],\n            });\n            const {\n              ${classNameLowerCamel}: { pagination, queryParams },\n            } = this.props;\n\n            this.queryList(pagination, queryParams);\n          },\n        });\n      },\n    })\n  }\n\n  handleSearch = e => {\n    e.preventDefault();\n\n    const {\n      form,\n      ${classNameLowerCamel}: { pagination, queryParams },\n    } = this.props;\n\n    form.validateFields((err, fieldsValue) => {\n      if (err) return;\n\n      const queryParamsTemp = {\n        ...queryParams,\n        fieldsValue: fieldsValue,\n      }\n      this.saveQueryParams({\n        ...queryParamsTemp,\n      });\n\n      this.queryList(pagination, queryParamsTemp);\n    });\n  };\n\n  handleSelectRows = (selectedRowKeys, selectedRows) => {\n    this.setState({\n      selectedRowKeys: selectedRowKeys,\n    });\n  };\n\n  handleTableChange = (paginationArg, filtersArg, sorter) => {\n    const {\n      ${classNameLowerCamel}: { queryParams }\n    } = this.props;\n\n    const queryParamsTemp = {\n      ...queryParams,\n      filters: filtersArg,\n      sorter: sorter,\n    };\n    this.saveQueryParams({\n      ...queryParamsTemp,\n    });\n\n    this.queryList(paginationArg, queryParamsTemp);\n  };\n\n  renderSearchForm = fieldsValue => {\n    const {\n      form: { getFieldDecorator },\n    } = this.props;\n    return (\n      <Form onSubmit={this.handleSearch} layout=\"inline\">\n        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>\n          <Col md={8} sm={24}>\n            <FormItem label={<FormattedMessage id=\"app.${classNameLowerCamel}.name\" />}>\n              {getFieldDecorator(\'name\', {\n                initialValue: fieldsValue && fieldsValue.name,\n              })(<Input placeholder={formatMessage({ id: \'app.${classNameLowerCamel}.name.placeholder\' })} />)}\n            </FormItem>\n          </Col>\n          <Col md={8} sm={24}>\n            <span className={styles.submitButtons}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                <FormattedMessage id=\"table.search\" />\n              </Button>\n            </span>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n\n  render() {\n    const {\n      ${classNameLowerCamel}: {\n        list, pagination, queryParams\n      },\n      loading,\n    } = this.props;\n\n\n    const {\n      selectedRowKeys,\n    } = this.state;\n\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.handleSelectRows,\n    };\n\n    const columns = [\n#foreach ($column in $columns)\n#if(${column.attrNameLowerCamel.equals(\"id\")})\n      {\n        title: \'ID\',\n        dataIndex: \'id\',\n        render: val => <a onClick={() => this.profile(val)}>{val}</a>\n      },\n#elseif(${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")})\n      {\n        title: formatMessage({ id: \'table.${column.attrNameLowerCamel}\' }),\n        dataIndex: \'${column.attrNameLowerCamel}\',\n        sorter: true,\n        sortOrder: queryParams && queryParams.sorter && queryParams.sorter.field === \'${column.attrNameLowerCamel}\' && queryParams.sorter.order,\n        render: val => moment(val).format(\'YYYY-MM-DD HH:mm:ss\'),\n      },\n#elseif(!(${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}))\n      {\n        title: formatMessage({ id: \'app.${classNameLowerCamel}.${column.attrNameLowerCamel}\' }),\n        dataIndex: \'${column.attrNameLowerCamel}\',\n      },\n#end\n#end\n      {\n        title: formatMessage({ id: \'table.operation\' }),\n        render: (text, record) => (\n          <span>\n            <Authorized authority={[\'auth:${classNameLowerCamel}:edit\']}>\n              <a onClick={e => {\n                e.preventDefault();\n                this.addOrEdit(record.id);\n              }\n              }>\n                <FormattedMessage id=\"table.edit\" />\n              </a>\n              <Divider type=\"vertical\" />\n            </Authorized>\n            <Authorized authority={[\'auth:${classNameLowerCamel}:profile\', \'auth:${classNameLowerCamel}:edit\', \'auth:${classNameLowerCamel}:duplicate\', \'auth:${classNameLowerCamel}:delete\']}>\n              <MoreBtn current={record.id} />\n            </Authorized>\n          </span>\n        ),\n      }\n    ];\n\n\n    const MoreBtn = props => (\n      <Dropdown\n        overlay={\n          <Menu>\n            {Authorized.check([\'auth:${classNameLowerCamel}:profile\'], <Menu.Item key=\"info\" onClick={() => this.profile(props.current)}><FormattedMessage id=\"table.info\" /></Menu.Item>)}\n            {Authorized.check([\'auth:${classNameLowerCamel}:edit\'], <Menu.Item key=\"edit\" onClick={() => this.addOrEdit(props.current)}><FormattedMessage id=\"table.edit\" /></Menu.Item>)}\n            {Authorized.check([\'auth:${classNameLowerCamel}:duplicate\'], <Menu.Item key=\"duplicate\" onClick={() => this.duplicate(props.current)}><FormattedMessage id=\"table.duplicate\" /></Menu.Item>)}\n            {Authorized.check([\'auth:${classNameLowerCamel}:delete\'], <Menu.Item key=\"delete\" onClick={() => this.delete(props.current)}><FormattedMessage id=\"table.delete\" /></Menu.Item>)}\n          </Menu>\n        }\n      >\n        <a>\n          <FormattedMessage id=\"table.more\" /> <Icon type=\"down\" />\n        </a>\n      </Dropdown>\n    );\n\n    return (\n      <PageHeaderWrapper title={formatMessage({ id: \'menu.${classNameLowerCamel}.${classNameLowerCamel}List\' })}>\n        <Card bordered={false}>\n          <div className={styles.tableList}>\n            <div className={styles.tableListForm}>{this.renderSearchForm(queryParams.fieldsValue)}</div>\n            <div className={styles.tableListOperator}>\n              <Authorized authority={[\'auth:${classNameLowerCamel}:add\']}>\n                <Button icon=\"plus\" type=\"primary\" onClick={() => this.addOrEdit()} >\n                  <FormattedMessage id=\"table.add\" />\n                </Button>\n              </Authorized>\n              <Authorized authority={[\'auth:${classNameLowerCamel}:delete\']}>\n              {selectedRowKeys.length > 0 && (\n                <span>\n                  <Button type=\"danger\" onClick={() => this.deleteBatch(selectedRowKeys)}><FormattedMessage id=\"table.deleteBatch\" /></Button>\n                </span>\n              )}\n              </Authorized>\n            </div>\n            <Table\n              loading={loading}\n              rowKey=\'id\'\n              dataSource={list}\n              pagination={pagination}\n              columns={columns}\n              rowSelection={rowSelection}\n              onChange={this.handleTableChange}\n            />\n          </div>\n        </Card>\n      </PageHeaderWrapper>\n    );\n  }\n}\n\nexport default ${classNameUpperCamel}List;', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('ant-design-pro-page-List (Modal版）', '${classNameUpperCamel}List.js', 'import React, { PureComponent } from \'react\';\nimport { connect } from \'dva\';\nimport moment from \'moment\';\nimport router from \'umi/router\';\nimport { formatMessage, FormattedMessage } from \'umi/locale\';\nimport {\n  Row,\n  Col,\n  Table,\n  Card,\n  Form,\n  Input,\n  Select,\n  Icon,\n  Button,\n  Dropdown,\n  Menu,\n  InputNumber,\n  DatePicker,\n  Modal,\n  message,\n  Badge,\n  Divider,\n  Steps,\n  Radio,\n} from \'antd\';\nimport PageHeaderWrapper from \'@/components/PageHeaderWrapper\';\nimport Authorized from \'@/utils/Authorized\';\nimport { getOrder, getFilterByMap } from \'@/utils/utils\';\nimport styles from \'@/pages/TableList.less\';\nimport ${classNameUpperCamel}Form from \'@/pages/${classNameUpperCamel}/${classNameUpperCamel}Form\';\nimport ${classNameUpperCamel}Profile from \'@/pages/${classNameUpperCamel}/${classNameUpperCamel}Profile\';\n\nconst FormItem = Form.Item;\n\n\n/* eslint react/no-multi-comp:0 */\n@connect(({ ${classNameLowerCamel}, loading }) => ({\n  ${classNameLowerCamel},\n  loading: loading.effects[\'${classNameLowerCamel}/fetch\'],\n}))\n@Form.create()\nclass ${classNameUpperCamel}List extends PureComponent {\n  state = {\n    selectedRowKeys: [],\n    selectedId: \'\',\n    duplicate: false,\n    formShow: false,\n    profileShow: false,\n  };\n\n  componentDidMount() {\n    const {\n      ${classNameLowerCamel}: { list, pagination, queryParams },\n    } = this.props;\n\n    this.queryList(pagination, queryParams);\n  }\n\n  queryList = (pagination, queryParams) => {\n    let sorter;\n    if (queryParams.sorter) {\n      sorter = {\n        field: queryParams.sorter.field,\n        order: getOrder(queryParams.sorter.order),\n      }\n    }\n\n    const { dispatch } = this.props;\n\n    dispatch({\n      type: \'${classNameLowerCamel}/fetch\',\n      payload: {\n        ...queryParams.fieldsValue,\n        ...queryParams.filters,\n        ...sorter,\n        offset: (pagination.current - 1) * pagination.pageSize,\n        limit: pagination.pageSize,\n      },\n    });\n  }\n\n  saveQueryParams = (queryParams) => {\n    const { dispatch } = this.props;\n    dispatch({\n      type: \'${classNameLowerCamel}/saveQueryParams\',\n      payload: queryParams,\n    });\n  }\n\n\n  addOrEdit = id => {\n    if (id) {\n      this.setState({\n        selectedId: id,\n        formShow: true,\n      });\n    } else {\n      this.setState({\n        formShow: true,\n      });\n    }\n  }\n\n  duplicate = (id) => {\n    this.setState({\n      selectedId: id,\n      duplicate: true,\n      formShow: true,\n    });\n  }\n\n  afterFormClose = () => {\n    this.setState({\n      selectedId: \'\',\n      duplicate: false,\n      formShow: false,\n    });\n  }\n\n  profile = id => {\n    this.setState({\n      selectedId: id,\n      profileShow: true,\n    });\n  }\n\n  afterProfileClose = () => {\n    this.setState({\n      selectedId: \'\',\n      profileShow: false,\n    });\n  }\n\n  delete = (id) => {\n    const ids = [];\n    ids.push(id);\n    this.deleteBatch(ids);\n  }\n\n\n  deleteBatch = (ids) => {\n    Modal.confirm({\n      title: formatMessage({ id: \'modal.delete\' }),\n      content: formatMessage({ id: \'modal.deleteConfirm\' }),\n      okText: formatMessage({ id: \'modal.confirm\' }),\n      cancelText: formatMessage({ id: \'modal.cancel\' }),\n      onOk: () => {\n        const { dispatch } = this.props;\n        dispatch({\n          type: \'${classNameLowerCamel}/deleteByIds\',\n          payload: ids,\n          callback: (response) => {\n            this.setState({\n              selectedRowKeys: [],\n            });\n            const {\n              ${classNameLowerCamel}: { pagination, queryParams },\n            } = this.props;\n\n            this.queryList(pagination, queryParams);\n          },\n        });\n      },\n    })\n  }\n\n  handleSearch = e => {\n    e.preventDefault();\n\n    const {\n      form,\n      ${classNameLowerCamel}: { pagination, queryParams },\n    } = this.props;\n\n    form.validateFields((err, fieldsValue) => {\n      if (err) return;\n\n      const queryParamsTemp = {\n        ...queryParams,\n        fieldsValue: fieldsValue,\n      }\n      this.saveQueryParams({\n        ...queryParamsTemp,\n      });\n\n      this.queryList(pagination, queryParamsTemp);\n    });\n  };\n\n  handleSelectRows = (selectedRowKeys, selectedRows) => {\n    this.setState({\n      selectedRowKeys: selectedRowKeys,\n    });\n  };\n\n  handleTableChange = (paginationArg, filtersArg, sorter) => {\n    const {\n      ${classNameLowerCamel}: { queryParams }\n    } = this.props;\n\n    const queryParamsTemp = {\n      ...queryParams,\n      filters: filtersArg,\n      sorter: sorter,\n    };\n    this.saveQueryParams({\n      ...queryParamsTemp,\n    });\n\n    this.queryList(paginationArg, queryParamsTemp);\n  };\n\n  renderSearchForm = fieldsValue => {\n    const {\n      form: { getFieldDecorator },\n    } = this.props;\n    return (\n      <Form onSubmit={this.handleSearch} layout=\"inline\">\n        <Row gutter={{ md: 8, lg: 24, xl: 48 }}>\n          <Col md={8} sm={24}>\n            <FormItem label={<FormattedMessage id=\"app.${classNameLowerCamel}.name\" />}>\n              {getFieldDecorator(\'name\', {\n                initialValue: fieldsValue && fieldsValue.name,\n              })(<Input placeholder={formatMessage({ id: \'app.${classNameLowerCamel}.name.placeholder\' })} />)}\n            </FormItem>\n          </Col>\n          <Col md={8} sm={24}>\n            <span className={styles.submitButtons}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                <FormattedMessage id=\"table.search\" />\n              </Button>\n            </span>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n\n  render() {\n    const {\n      ${classNameLowerCamel}: {\n        list, pagination, queryParams\n      },\n      loading,\n    } = this.props;\n\n\n    const {\n      selectedRowKeys, selectedId, duplicate, formShow, profileShow,\n    } = this.state;\n\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.handleSelectRows,\n    };\n\n    const columns = [\n#foreach ($column in $columns)\n#if(${column.attrNameLowerCamel.equals(\"id\")})\n      {\n        title: \'ID\',\n        dataIndex: \'id\',\n        render: val => <a onClick={() => this.profile(val)}>{val}</a>\n      },\n#elseif(${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")})\n      {\n        title: formatMessage({ id: \'table.${column.attrNameLowerCamel}\' }),\n        dataIndex: \'${column.attrNameLowerCamel}\',\n        sorter: true,\n        sortOrder: queryParams && queryParams.sorter && queryParams.sorter.field === \'${column.attrNameLowerCamel}\' && queryParams.sorter.order,\n        render: val => moment(val).format(\'YYYY-MM-DD HH:mm:ss\'),\n      },\n#elseif(!(${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}))\n      {\n        title: formatMessage({ id: \'app.${classNameLowerCamel}.${column.attrNameLowerCamel}\' }),\n        dataIndex: \'${column.attrNameLowerCamel}\',\n      },\n#end\n#end\n      {\n        title: formatMessage({ id: \'table.operation\' }),\n        render: (text, record) => (\n          <span>\n            <Authorized authority={[\'${systemPrefix}:${classNameLowerCamel}:edit\']}>\n              <a onClick={e => {\n                e.preventDefault();\n                this.addOrEdit(record.id);\n              }\n              }>\n                <FormattedMessage id=\"table.edit\" />\n              </a>\n              <Divider type=\"vertical\" />\n            </Authorized>\n            <Authorized authority={[\'${systemPrefix}:${classNameLowerCamel}:profile\', \'${systemPrefix}:${classNameLowerCamel}:edit\', \'${systemPrefix}:${classNameLowerCamel}:duplicate\', \'${systemPrefix}:${classNameLowerCamel}:delete\']}>\n              <MoreBtn current={record.id} />\n            </Authorized>\n          </span>\n        ),\n      }\n    ];\n\n    const MoreBtn = props => (\n      <Dropdown\n        overlay={\n          <Menu>\n            {Authorized.check([\'${systemPrefix}:${classNameLowerCamel}:profile\'], <Menu.Item key=\"info\" onClick={() => this.profile(props.current)}><FormattedMessage id=\"table.info\" /></Menu.Item>)}\n            {Authorized.check([\'${systemPrefix}:${classNameLowerCamel}:edit\'], <Menu.Item key=\"edit\" onClick={() => this.addOrEdit(props.current)}><FormattedMessage id=\"table.edit\" /></Menu.Item>)}\n            {Authorized.check([\'${systemPrefix}:${classNameLowerCamel}:duplicate\'], <Menu.Item key=\"duplicate\" onClick={() => this.duplicate(props.current)}><FormattedMessage id=\"table.duplicate\" /></Menu.Item>)}\n            {Authorized.check([\'${systemPrefix}:${classNameLowerCamel}:delete\'], <Menu.Item key=\"delete\" onClick={() => this.delete(props.current)}><FormattedMessage id=\"table.delete\" /></Menu.Item>)}\n          </Menu>\n        }\n      >\n        <a>\n          <FormattedMessage id=\"table.more\" /> <Icon type=\"down\" />\n        </a>\n      </Dropdown>\n    );\n\n    return (\n      <PageHeaderWrapper title={formatMessage({ id: \'menu.${classNameLowerCamel}.${classNameLowerCamel}List\' })}>\n        <Card bordered={false}>\n          <div className={styles.tableList}>\n            <div className={styles.tableListForm}>{this.renderSearchForm(queryParams.fieldsValue)}</div>\n            <div className={styles.tableListOperator}>\n              <Authorized authority={[\'${systemPrefix}:${classNameLowerCamel}:add\']}>\n                <Button icon=\"plus\" type=\"primary\" onClick={() => this.addOrEdit()} >\n                  <FormattedMessage id=\"table.add\" />\n                </Button>\n              </Authorized>\n              <Authorized authority={[\'${systemPrefix}:${classNameLowerCamel}:delete\']}>\n                {selectedRowKeys.length > 0 && (\n                  <span>\n                    <Button type=\"danger\" onClick={() => this.deleteBatch(selectedRowKeys)}><FormattedMessage id=\"table.deleteBatch\" /></Button>\n                  </span>\n                )}\n              </Authorized>\n            </div>\n            <Table\n              loading={loading}\n              rowKey=\'id\'\n              dataSource={list}\n              pagination={pagination}\n              columns={columns}\n              rowSelection={rowSelection}\n              onChange={this.handleTableChange}\n            />\n          </div>\n        </Card>\n        {formShow ? <${classNameUpperCamel}Form\n          id={selectedId}\n          duplicate={duplicate}\n          afterClose={this.afterFormClose}\n          queryList={this.queryList}\n        /> : null}\n        {profileShow ? <${classNameUpperCamel}Profile\n          id={selectedId}\n          afterClose={this.afterProfileClose}\n        /> : null}\n      </PageHeaderWrapper>\n    );\n  }\n}\n\nexport default ${classNameUpperCamel}List;', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('ant-design-pro-page-Form', '${classNameUpperCamel}Form.js', 'import React, { PureComponent } from \'react\';\nimport { connect } from \'dva\';\nimport { message } from \'antd\';\nimport router from \'umi/router\';\nimport { formatMessage, FormattedMessage } from \'umi/locale\';\nimport {\n  Form,\n  Input,\n  DatePicker,\n  Select,\n  Button,\n  Card,\n  InputNumber,\n  Radio,\n  Icon,\n  Tooltip,\n  Modal,\n} from \'antd\';\nimport PageHeaderWrapper from \'@/components/PageHeaderWrapper\';\n\nconst FormItem = Form.Item;\nconst { TextArea } = Input;\n\n@connect(({ ${classNameLowerCamel}, loading }) => ({\n  ${classNameLowerCamel},\n  loading: loading.effects[\'${classNameLowerCamel}/fetchById\'],\n  submitting: loading.effects[\'${classNameLowerCamel}/submitForm\'],\n}))\n@Form.create()\nclass ${classNameUpperCamel}Form extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //prop.id modal传进来的， (props.match && props.match.params.id) url 上的\n      id: props.id || (props.match && props.match.params.id),\n      data: {},\n      duplicate: props.duplicate || (props.match && props.match.params.duplicate),\n      show: true,\n    }\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n\n    const { id } = this.state;\n    if (id) {\n      dispatch({\n        type: \'${classNameLowerCamel}/fetchById\',\n        payload: id,\n        callback: (response) => {\n          this.setState({\n            data: response || {},\n          });\n        }\n      });\n    }\n  }\n\n  handleCancel = () => {\n    this.setState({\n      show: false,\n    })\n  }\n\n  handleReturn = () => {\n    router.push(`/${classNameLowerCamel}/${classNameLowerCamel}-list`);\n  };\n\n  handleSubmit = e => {\n    const {\n      dispatch,\n      form,\n    } = this.props;\n    const { duplicate } = this.state;\n    e.preventDefault();\n    form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        if (duplicate) {\n          delete values.id;\n        }\n        dispatch({\n          type: \'${classNameLowerCamel}/submitForm\',\n          payload: values,\n          callback: (response) => {\n            const {\n              afterClose,\n              queryList,\n              ${classNameLowerCamel}: {\n                pagination, queryParams\n              },\n            } = this.props;\n\n            if (afterClose) {\n              this.handleCancel();\n              queryList(pagination, queryParams);\n            } else {\n              this.handleReturn();\n            }\n          },\n        });\n      }\n    });\n  };\n\n  renderFooter = () => {\n    const { submitting } = this.props;\n    return [\n      <Button key=\"submit\" type=\"primary\" htmlType=\"submit\" loading={submitting} onClick={this.handleSubmit}>\n        <FormattedMessage id=\"form.submit\" />\n      </Button>,\n      <Button key=\"cancel\" style={{ marginLeft: 8 }} onClick={this.handleCancel}>\n        <FormattedMessage id=\"form.cancel\" />\n      </Button>\n    ];\n  }\n\n  render() {\n    const {\n      loading,\n      submitting,\n      form: { getFieldDecorator, getFieldValue },\n      afterClose,\n    } = this.props;\n\n\n    const { id, data, duplicate, show } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 12 },\n      },\n    };\n\n    const submitFormLayout = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 10, offset: 7 },\n      },\n    };\n\n\n    return (\n      //\n      afterClose ?\n        <Modal\n          width={640}\n          bodyStyle={{ padding: \'32px 40px 48px\' }}\n          destroyOnClose\n          title={!id || duplicate ? <FormattedMessage id=\"app.${classNameLowerCamel}.add.title\" /> : <FormattedMessage id=\"app.${classNameLowerCamel}.edit.title\" />}\n          visible={show}\n          footer={this.renderFooter()}\n          onCancel={this.handleCancel}\n          afterClose={() => afterClose()}\n        >\n          <Card bordered={false} loading={loading}>\n            <Form hideRequiredMark style={{ marginTop: 8 }}>\n#foreach ($column in $columns)\n#if(${column.attrNameLowerCamel.equals(\"id\")})\n              {getFieldDecorator(\'id\', { initialValue: data.id })\n                (<Input hidden />)}\n#elseif(!(${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")} \n  || ${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}))\n              <FormItem {...formItemLayout} label={<FormattedMessage id=\"app.${classNameLowerCamel}.${column.attrNameLowerCamel}\" />}>\n                {getFieldDecorator(\'${column.attrNameLowerCamel}\', {\n                  initialValue: data.${column.attrNameLowerCamel},\n                  rules: [\n                    {\n#if(${column.isNullable.equals(\"NO\")}) \n                      required: true,\n#end\n                      message: formatMessage({ id: \'validation.${classNameLowerCamel}.${column.attrNameLowerCamel}\' }),\n                    },\n                  ],\n#if(${column.dataType.equals(\"text\")})\n                })(<TextArea placeholder={formatMessage({ id: \'app.${classNameLowerCamel}.${column.attrNameLowerCamel}.placeholder\' })} />)}\n#else\n                })(<Input placeholder={formatMessage({ id: \'app.${classNameLowerCamel}.${column.attrNameLowerCamel}.placeholder\' })} />)}\n#end\n              </FormItem>\n#end\n#end\n            </Form>\n          </Card>\n        </Modal>\n        :\n        <PageHeaderWrapper title={!id || duplicate ? <FormattedMessage id=\"app.${classNameLowerCamel}.add.title\" /> : <FormattedMessage id=\"app.${classNameLowerCamel}.edit.title\" />}>\n          <Card bordered={false} loading={loading}>\n            <Form onSubmit={this.handleSubmit} hideRequiredMark style={{ marginTop: 8 }}>\n#foreach ($column in $columns)\n#if(${column.attrNameLowerCamel.equals(\"id\")})\n              {getFieldDecorator(\'id\', { initialValue: data.id })\n                (<Input hidden />)}\n#elseif(!(${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")} \n  || ${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}))\n              <FormItem {...formItemLayout} label={<FormattedMessage id=\"app.${classNameLowerCamel}.${column.attrNameLowerCamel}\" />}>\n                {getFieldDecorator(\'${column.attrNameLowerCamel}\', {\n                  initialValue: data.${column.attrNameLowerCamel},\n                  rules: [\n                    {\n#if(${column.isNullable.equals(\"NO\")}) \n                      required: true,\n#end\n                      message: formatMessage({ id: \'validation.${classNameLowerCamel}.${column.attrNameLowerCamel}\' }),\n                    },\n                  ],\n#if(${column.dataType.equals(\"text\")})\n                })(<TextArea placeholder={formatMessage({ id: \'app.${classNameLowerCamel}.${column.attrNameLowerCamel}.placeholder\' })} />)}\n#else\n                })(<Input placeholder={formatMessage({ id: \'app.${classNameLowerCamel}.${column.attrNameLowerCamel}.placeholder\' })} />)}\n#end\n              </FormItem>\n#end\n#end\n              <FormItem {...submitFormLayout} style={{ marginTop: 32 }}>\n                <Button type=\"primary\" htmlType=\"submit\" loading={submitting}>\n                  <FormattedMessage id=\"form.submit\" />\n                </Button>\n                <Button style={{ marginLeft: 8 }} onClick={this.handleReturn}>\n                  <FormattedMessage id=\"form.return\" />\n                </Button>\n              </FormItem>\n            </Form>\n          </Card>\n        </PageHeaderWrapper>\n    );\n  }\n}\n\nexport default ${classNameUpperCamel}Form;\n', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('ant-design-pro-page-Profile', '${classNameUpperCamel}Profile.js', 'import React, { Component } from \'react\';\nimport { connect } from \'dva\';\nimport { Card, Badge, Table, Divider, Modal } from \'antd\';\nimport DescriptionList from \'@/components/DescriptionList\';\nimport PageHeaderWrapper from \'@/components/PageHeaderWrapper\';\nimport moment from \'moment\';\nimport { formatMessage, FormattedMessage } from \'umi/locale\';\n\n\nconst { Description } = DescriptionList;\n\n\n@connect(({ ${classNameLowerCamel}, loading }) => ({\n  ${classNameLowerCamel},\n  loading: loading.effects[\'${classNameLowerCamel}/fetchById\'],\n}))\nclass ${classNameUpperCamel}Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //prop.id modal传进来的， (props.match && props.match.params.id) url 上的\n      id: props.id || (props.match && props.match.params.id),\n      data: {},\n      show: true,\n    }\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    const { id } = this.state;\n    dispatch({\n      type: \'${classNameLowerCamel}/fetchById\',\n      payload: id,\n      callback: (response) => {\n        this.setState({\n          data: response || {},\n        });\n      }\n    });\n  }\n\n  handleCancel = () => {\n    this.setState({\n      show: false,\n    })\n  }\n\n  render() {\n    const {\n      loading,\n      afterClose,\n    } = this.props;\n\n    const { data, show } = this.state;\n\n    return (\n      afterClose ?\n        <Modal\n          width={840}\n          bodyStyle={{ padding: \'32px 40px 48px\' }}\n          destroyOnClose\n          title={<FormattedMessage id=\"app.${classNameLowerCamel}.info.title\" />}\n          visible={show}\n          footer={null}\n          onCancel={this.handleCancel}\n          afterClose={() => afterClose()}\n        >\n          <Card bordered={false} loading={loading}>\n            <DescriptionList size=\"large\" style={{ marginBottom: 32 }}>\n#foreach ($column in $columns)\n#if(${column.attrNameLowerCamel.equals(\"id\")})\n              <Description term=\"ID\">{data.id}</Description>\n#elseif(${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")})\n              <Description term={<FormattedMessage id=\"table.${column.attrNameLowerCamel}\" />}>{moment(data.${column.attrNameLowerCamel}).format(\'YYYY-MM-DD HH:mm:ss\')}</Description>\n#elseif(!(${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}))\n              <Description term={<FormattedMessage id=\"app.${classNameLowerCamel}.${column.attrNameLowerCamel}\" />}>{data.${column.attrNameLowerCamel}}</Description>\n#end\n#end\n            </DescriptionList>\n            <Divider style={{ marginBottom: 32 }} />\n          </Card>\n        </Modal>\n        :\n        <PageHeaderWrapper title={<FormattedMessage id=\"app.${classNameLowerCamel}.info.title\" />}>\n          <Card bordered={false} loading={loading}>\n            <DescriptionList size=\"large\" style={{ marginBottom: 32 }}>\n#foreach ($column in $columns)\n#if(${column.attrNameLowerCamel.equals(\"id\")})\n              <Description term=\"ID\">{data.id}</Description>\n#elseif(${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")})\n              <Description term={<FormattedMessage id=\"table.${column.attrNameLowerCamel}\" />}>{moment(data.${column.attrNameLowerCamel}).format(\'YYYY-MM-DD HH:mm:ss\')}</Description>\n#elseif(!(${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}))\n              <Description term={<FormattedMessage id=\"app.${classNameLowerCamel}.${column.attrNameLowerCamel}\" />}>{data.${column.attrNameLowerCamel}}</Description>\n#end\n#end\n            </DescriptionList>\n            <Divider style={{ marginBottom: 32 }} />\n          </Card>\n        </PageHeaderWrapper>\n    );\n  }\n}\n\nexport default ${classNameUpperCamel}Profile;', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('ant-design-pro-page-api', '${classNameLowerCamel}-api.js', '#set ($var1=\'${stringify(params)}\')\n#set ($var2=\'${id}\')\n\nexport async function query${classNameUpperCamel}(params = {}) {\n  return request(`${systemApiPrefix}/${classNameLowerCamel}?${var1}`, {\n    getResponse: true,\n  });\n}\n\nexport async function get${classNameUpperCamel}(id) {\n  return request(`${systemApiPrefix}/${classNameLowerCamel}/${var2}`);\n}\n\nexport async function add${classNameUpperCamel}(params) {\n  return request(`${systemApiPrefix}/${classNameLowerCamel}`, {\n    method: \'POST\',\n    data: params,\n    getResponse: true,\n  });\n}\n\nexport async function update${classNameUpperCamel}(params) {\n  return request(`${systemApiPrefix}/${classNameLowerCamel}`, {\n    method: \'PUT\',\n    data: params,\n    getResponse: true,\n  });\n}\n\nexport async function delete${classNameUpperCamel}(ids) {\n  return request(`${systemApiPrefix}/${classNameLowerCamel}`, {\n    method: \'DELETE\',\n    body: ids,\n    getResponse: true,\n  });\n}\n', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('Java-DO', '${classNameUpperCamel}DO.java', 'package ${domainPackage}.DO;\n\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\nimport com.baomidou.mybatisplus.annotation.*;\n#elseif(${daoType.equals(\"jpa\")})\nimport org.hibernate.annotations.SQLDelete;\nimport org.hibernate.annotations.Where;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\nimport javax.persistence.*;\n#end\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n#if(${lombok.equals(\"true\")})\nimport lombok.Data;\n#end\n#if(${validationInDO.equals(\"true\")})\nimport ${validationPackage}.Insert;\nimport ${validationPackage}.Update;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\n#end\nimport java.time.LocalDateTime;\n\n/**\n * ${tableComment}\n * \n * @author ${author}\n * @email ${email}\n * @create ${now}\n */\n#if(${lombok.equals(\"true\")})\n@Data\n#end\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n@TableName(\"${tableName}\")\n#elseif(${daoType.equals(\"jpa\")})\n@Entity\n@Table(name = \"${tableName}\")\n@SQLDelete(sql = \"update ${tableName} set deleted = 1 where id = ? and version = ?\")\n@Where(clause = \"deleted = 0\")\n@EntityListeners(AuditingEntityListener.class)\n#end\npublic class ${classNameUpperCamel}DO {\n\n#foreach ($column in $columns)\n    /**\n     * $column.comment\n     */\n#if(${column.attrNameLowerCamel.equals(\"id\")})\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n    @TableId(type = IdType.AUTO)\n#elseif(${daoType.equals(\"jpa\")})\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n#end\n#if(${validationInDO.equals(\"true\")})\n    @NotNull(groups = Update.class)\n#end\n#elseif(${column.attrNameLowerCamel.equals(\"deleted\")})\n    @JsonIgnore\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n    @TableLogic\n#end\n#elseif(${column.attrNameLowerCamel.equals(\"version\")})\n    @Version\n#elseif(${column.attrNameLowerCamel.equals(\"createTime\")})\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n    @TableField(fill = FieldFill.INSERT)\n#elseif(${daoType.equals(\"jpa\")})\n    @CreatedDate\n#end\n#elseif(${column.attrNameLowerCamel.equals(\"updateTime\")})\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n    @TableField(fill = FieldFill.INSERT_UPDATE)\n#elseif(${daoType.equals(\"jpa\")})\n    @LastModifiedDate\n#end\n#else\n#if(${validationInDO.equals(\"true\")} && ${column.isNullable.equals(\"NO\")})\n#if(${column.attrType.equals(\"String\")})\n    @NotBlank(groups = {Insert.class, Update.class})\n#else\n    @NotNull(groups = {Insert.class, Update.class})\n#end\n#end\n#end\n	private $column.attrType ${column.attrNameLowerCamel};\n#end\n#if(!${lombok.equals(\"true\")})\n#foreach ($column in $columns)\n\n	public void set${column.attrNameUpperCamel}($column.attrType $column.attrNameLowerCamel) {\n		this.$column.attrNameLowerCamel = $column.attrNameLowerCamel;\n	}\n\n	public $column.attrType get${column.attrNameUpperCamel}() {\n		return $column.attrNameLowerCamel;\n	}\n#end\n#end\n}\n', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('Java-Repository', '${classNameUpperCamel}Repository.java', 'package  ${repositoryPackage};\n\nimport ${domainPackage}.DO.${classNameUpperCamel}DO;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.stereotype.Repository;\n\n/**\n * ${tableComment}\n * \n * @author ${author}\n * @email ${email}\n * @create ${now}\n */\n@Repository\npublic interface ${classNameUpperCamel}Repository extends JpaRepository<${classNameUpperCamel}DO, Long>,\n        JpaSpecificationExecutor<${classNameUpperCamel}DO> {\n}\n', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('Java-Mapper', '${classNameUpperCamel}Mapper.java', 'package ${mapperPackage};\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport ${domainPackage}.DO.${classNameUpperCamel}DO;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * ${tableComment}\n * \n * @author ${author}\n * @email ${email}\n * @create ${now}\n */\n@Mapper\npublic interface ${classNameUpperCamel}Mapper extends BaseMapper<${classNameUpperCamel}DO> {\n}\n', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('Java-Mapper-Xml', '${classNameUpperCamel}Mapper.xml', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"${mapperPackage}.${classNameUpperCamel}Mapper\">\n</mapper>', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('Java-Service', '${classNameUpperCamel}Service.java', 'package ${servicePackage};\n\nimport ${domainPackage}.DO.${classNameUpperCamel}DO;\nimport ${domainPackage}.DTO.${classNameUpperCamel}QueryDTO;\nimport javafx.util.Pair;\n\nimport java.util.List;\n\n/**\n * ${tableComment}\n * \n * @author ${author}\n * @email ${email}\n * @create ${now}\n */\npublic interface ${classNameUpperCamel}Service {\n\n    Pair<List<${classNameUpperCamel}DO>, ${pk.attrType}> list(${classNameUpperCamel}QueryDTO queryDTO);\n\n    ${classNameUpperCamel}DO get(${pk.attrType} id);\n\n    void insert(${classNameUpperCamel}DO ${classNameLowerCamel}DO);\n\n    void update(${classNameUpperCamel}DO ${classNameLowerCamel}DO);\n\n    void delete(${pk.attrType}... ids);\n}\n', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('Java-Service-Impl', '${classNameUpperCamel}ServiceImpl.java', 'package ${serviceImplPackage};\n\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport ${mapperPackage}.${classNameUpperCamel}Mapper;\nimport ${commonDomainPackage}.RPage;\n#elseif(${daoType.equals(\"jpa\")})\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.jpa.domain.Specification;\nimport ${repositoryPackage}.${classNameUpperCamel}Repository;\nimport ${commonDomainPackage}.RPageRequest;\nimport javax.persistence.criteria.Predicate;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n#end\nimport ${domainPackage}.DO.${classNameUpperCamel}DO;\nimport ${domainPackage}.DTO.${classNameUpperCamel}QueryDTO;\nimport ${commonEnumsPackage}.DBOrder;\nimport ${servicePackage}.${classNameUpperCamel}Service;\nimport java.util.ArrayList;\nimport javafx.util.Pair;\nimport org.springframework.beans.BeanUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.CollectionUtils;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * ${tableComment}\n * \n * @author ${author}\n * @email ${email}\n * @create ${now}\n */\n@Service\npublic class ${classNameUpperCamel}ServiceImpl implements ${classNameUpperCamel}Service {\n    @Autowired\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n    private ${classNameUpperCamel}Mapper ${classNameLowerCamel}Mapper;\n#elseif(${daoType.equals(\"jpa\")})\n    private ${classNameUpperCamel}Repository ${classNameLowerCamel}Repository;\n#end\n\n    @Override\n    public Pair<List<${classNameUpperCamel}DO>, Long> list(${classNameUpperCamel}QueryDTO queryDTO) {\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n        IPage<${classNameUpperCamel}DO> page = new RPage<>(queryDTO.getOffset(), queryDTO.getLimit());\n        QueryWrapper<${classNameUpperCamel}DO> wrapper = new QueryWrapper<>();\n#foreach ($column in $columns)\n#if(!(${column.attrNameLowerCamel.equals(\"id\")} || ${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")} || ${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}))\n#if(${column.attrType.equals(\"String\")})\n        if (StringUtils.isNotBlank(queryDTO.get${column.attrNameUpperCamel}())) {\n            wrapper = wrapper.eq(\"${column.name}\", queryDTO.get${column.attrNameUpperCamel}());\n        }\n#else\n        if (queryDTO.get${column.attrNameUpperCamel}() != null) {\n            wrapper = wrapper.eq(\"${column.name}\", queryDTO.get${column.attrNameUpperCamel}());\n        }\n#end\n#end\n#end\n        if (queryDTO.getField() != null) {\n            wrapper = wrapper.orderBy(true, DBOrder.ASC.name().equals(queryDTO.getOrder()),\n                    com.baomidou.mybatisplus.core.toolkit.StringUtils.camelToUnderline(queryDTO.getField()));\n        } else {\n            wrapper = wrapper.orderByDesc(\"create_time\");\n        }\n        ${classNameLowerCamel}Mapper.selectPage(page, wrapper);\n        return new Pair<>(page.getRecords(), page.getTotal());\n#elseif(${daoType.equals(\"jpa\")})\n        Pageable pageable;\n        if (queryDTO.getField() != null) {\n            pageable = RPageRequest.of((int) queryDTO.getOffset(), (int) queryDTO.getLimit(),\n                    Sort.Direction.valueOf(queryDTO.getOrder()), queryDTO.getField());\n        } else {\n            pageable = RPageRequest.of((int) queryDTO.getOffset(), (int) queryDTO.getLimit(),\n                    Sort.Direction.DESC, \"createTime\");\n        }\n\n        Page<${classNameUpperCamel}DO> page = ${classNameLowerCamel}Repository.findAll((Specification<${classNameUpperCamel}DO>) (root, criteriaQuery, criteriaBuilder) -> {\n            List<Predicate> list = new ArrayList<>();\n#foreach ($column in $columns)\n#if(!(${column.attrNameLowerCamel.equals(\"id\")} || ${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")} || ${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}))\n#if(${column.attrType.equals(\"String\")})\n        if (StringUtils.isNotBlank(queryDTO.get${column.attrNameUpperCamel}())) {\n            list.add(criteriaBuilder.equal(root.get(\"${column.attrNameLowerCamel}\").as(${column.attrType}.class), queryDTO.get${column.attrNameUpperCamel}()));\n        }\n#else\n        if (queryDTO.get${column.attrNameUpperCamel}() != null) {\n            list.add(criteriaBuilder.equal(root.get(\"${column.attrNameLowerCamel}\").as(${column.attrType}.class), queryDTO.get${column.attrNameUpperCamel}()));\n        }\n#end\n#end\n#end\n            Predicate[] predicates = new Predicate[list.size()];\n            return criteriaBuilder.and(list.toArray(predicates));\n        }, pageable);\n\n        return new Pair<>(page.getContent(), page.getTotalElements());\n#end\n    }\n\n    @Override\n    public ${classNameUpperCamel}DO get(${pk.attrType} id) {\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n        return ${classNameLowerCamel}Mapper.selectById(id);\n#elseif(${daoType.equals(\"jpa\")})\n        return ${classNameLowerCamel}Repository.findById(id).orElse(null);\n#end\n    }\n\n    @Override\n    public void insert(${classNameUpperCamel}DO ${classNameLowerCamel}DO) {\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n        ${classNameLowerCamel}Mapper.insert(${classNameLowerCamel}DO);\n#elseif(${daoType.equals(\"jpa\")})\n#foreach ($column in $columns)\n#if(${column.name.equals(\"deleted\")})\n        ${classNameLowerCamel}DO.setDeleted(0);\n#end\n#end\n        ${classNameLowerCamel}Repository.save(${classNameLowerCamel}DO);\n#end\n    }\n\n    @Override\n    public void update(${classNameUpperCamel}DO ${classNameLowerCamel}DO) {\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n        ${classNameLowerCamel}Mapper.updateById(${classNameLowerCamel}DO);\n#elseif(${daoType.equals(\"jpa\")})\n        Optional<${classNameUpperCamel}DO> configDODB = ${classNameLowerCamel}Repository.findById(${classNameLowerCamel}DO.getId());\n        if (${classNameLowerCamel}DODB.isPresent()) {\n            BeanUtils.copyProperties(${classNameLowerCamel}DO, ${classNameLowerCamel}DODB.get(),  \"createTime\", \"updateTime\", \"deleted\");\n            ${classNameLowerCamel}Repository.save(${classNameLowerCamel}DODB.get());\n        }\n#end\n    }\n\n    @Override\n    public void delete(${pk.attrType}... ids) {\n#if(${daoType.isNull()} || !${daoType} || ${daoType.equals(\"mybatisPlus\")})\n        ${classNameLowerCamel}Mapper.deleteBatchIds(Arrays.asList(ids));\n#elseif(${daoType.equals(\"jpa\")})\n        ${classNameLowerCamel}Repository.deleteAll(Arrays.stream(ids).map(id -> {\n            Optional<${classNameUpperCamel}DO> ${classNameLowerCamel}DO = ${classNameLowerCamel}Repository.findById(id);\n            return ${classNameLowerCamel}DO.orElse(null);\n        }).collect(Collectors.toList()));\n#end\n    }\n}\n', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('Java-DTO-Query', '${classNameUpperCamel}QueryDTO.java', 'package ${domainPackage}.DTO;\n\nimport ${commonDomainPackage}.DTO.QueryDTO;\n#if(${lombok.equals(\"true\")})\nimport lombok.Data;\n#end\n\n/**\n * ${tableComment}\n * \n * @author ${author}\n * @email ${email}\n * @create ${now}\n */\n#if(${lombok.equals(\"true\")})\n@Data\n#end\npublic class ${classNameUpperCamel}QueryDTO extends QueryDTO {\n\n#foreach ($column in $columns)\n#if(!(${column.attrNameLowerCamel.equals(\"id\")} || ${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")} || ${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}))\n    /**\n     * $column.comment\n     */\n	private $column.attrType ${column.attrNameLowerCamel};\n#end\n#end\n#if(!${lombok.equals(\"true\")})\n#foreach ($column in $columns)\n#if(!(${column.attrNameLowerCamel.equals(\"id\")} || ${column.attrNameLowerCamel.equals(\"createTime\")} || ${column.attrNameLowerCamel.equals(\"updateTime\")} || ${column.attrNameLowerCamel.equals(\"version\")} || ${column.attrNameLowerCamel.equals(\"deleted\")}))\n\n	public void set${column.attrNameUpperCamel}($column.attrType $column.attrNameLowerCamel) {\n		this.$column.attrNameLowerCamel = $column.attrNameLowerCamel;\n	}\n\n	public $column.attrType get${column.attrNameUpperCamel}() {\n		return $column.attrNameLowerCamel;\n	}\n#end\n#end\n#end\n}\n', 0, 1, 0, now(), now());
INSERT INTO `template`(`name`, `file_name`, `content`, `type`, `version`, `deleted`, `create_time`, `update_time`) VALUES ('Java-Controller', '${classNameUpperCamel}Controller.java', 'package ${controllerPackage};\n\nimport ${domainPackage}.DO.${classNameUpperCamel}DO;\nimport ${domainPackage}.DTO.${classNameUpperCamel}QueryDTO;\nimport ${servicePackage}.${classNameUpperCamel}Service;\nimport ${validationPackage}.Insert;\nimport ${validationPackage}.Update;\nimport javafx.util.Pair;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.List;\n\n/**\n * ${tableComment}\n * \n * @author ${author}\n * @email ${email}\n * @create ${now}\n */\n@RestController\n@RequestMapping(\"/${classNameLowerCamel}\")\npublic class ${classNameUpperCamel}Controller {\n\n    @Autowired\n    private ${classNameUpperCamel}Service ${classNameLowerCamel}Service;\n\n    @GetMapping\n    public List<${classNameUpperCamel}DO> list(${classNameUpperCamel}QueryDTO queryDTO, HttpServletResponse response) {\n        Pair<List<${classNameUpperCamel}DO>, Long> result = ${classNameLowerCamel}Service.list(queryDTO);\n        response.addHeader(\"X-Total-Count\", String.valueOf(result.getValue()));\n        return result.getKey();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ${classNameUpperCamel}DO get(@PathVariable(\"id\") ${pk.attrType} id) {\n        return ${classNameLowerCamel}Service.get(id);\n    }\n\n    @PostMapping\n    public void insert(@RequestBody @Validated(Insert.class) ${classNameUpperCamel}DO ${classNameLowerCamel}DO) {\n        ${classNameLowerCamel}Service.insert(${classNameLowerCamel}DO);\n    }\n\n    @PutMapping\n    public void update(@RequestBody @Validated(Update.class) ${classNameUpperCamel}DO ${classNameLowerCamel}DO) {\n        ${classNameLowerCamel}Service.update(${classNameLowerCamel}DO);\n    }\n\n    @DeleteMapping\n    public void delete(@RequestBody Long... ids) {\n        ${classNameLowerCamel}Service.delete(ids);\n    }\n}\n', 0, 1, 0, now(), now());


